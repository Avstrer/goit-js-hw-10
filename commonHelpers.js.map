{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описаний в документації\nimport flatpickr from 'flatpickr';\n// Додатковий імпорт стилів\nimport 'flatpickr/dist/flatpickr.min.css';\n\n// Описаний у документації\nimport iziToast from 'izitoast';\n// Додатковий імпорт стилів\nimport 'izitoast/dist/css/iziToast.min.css';\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nlet userSelectedDate;\n\nconst input = document.querySelector('#datetime-picker');\nconst button = document.querySelector('[data-start]');\nconst timerElement = document.querySelectorAll('.value');\n\nbutton.setAttribute('disabled', 'true');\n\nconst flatInput = flatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    // console.log(selectedDates[0]);\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate.getTime() < Date.now()) {\n      iziToast.error({\n        title: 'Error!',\n        messageColor: 'red',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      button.setAttribute('disabled', 'true');\n    } else {\n      input.setAttribute('disabled', 'true');\n      button.removeAttribute('disabled');\n    }\n  },\n});\n\nbutton.addEventListener('click', timerFunctionListener);\n\nfunction timerFunctionListener(event) {\n  event.preventDefault();\n  button.setAttribute('disabled', 'true');\n  const interval = setInterval(() => {\n    const different = userSelectedDate.getTime() - Date.now();\n\n    const time = convertMs(different);\n    timerElement[0].textContent = time.days.toString().padStart(2, '0');\n    timerElement[1].textContent = time.hours.toString().padStart(2, '0');\n    timerElement[2].textContent = time.minutes.toString().padStart(2, '0');\n    timerElement[3].textContent = time.seconds.toString().padStart(2, '0');\n    if (different < 1500) {\n      clearInterval(interval);\n      input.setAttribute('disabled', 'false');\n    }\n  }, 1000);\n}\n"],"names":["convertMs","ms","days","hours","minutes","seconds","userSelectedDate","input","button","timerElement","flatpickr","selectedDates","iziToast","timerFunctionListener","event","interval","different","time"],"mappings":"0FAUA,SAASA,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,IAAIC,EAEJ,MAAMC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,cAAc,EAC9CC,EAAe,SAAS,iBAAiB,QAAQ,EAEvDD,EAAO,aAAa,WAAY,MAAM,EAEpBE,EAAU,mBAAoB,CAC9C,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErBL,EAAmBK,EAAc,CAAC,EAC9BL,EAAiB,QAAO,EAAK,KAAK,IAAG,GACvCM,EAAS,MAAM,CACb,MAAO,SACP,aAAc,MACd,QAAS,qCACT,SAAU,UAClB,CAAO,EACDJ,EAAO,aAAa,WAAY,MAAM,IAEtCD,EAAM,aAAa,WAAY,MAAM,EACrCC,EAAO,gBAAgB,UAAU,EAEpC,CACH,CAAC,EAEDA,EAAO,iBAAiB,QAASK,CAAqB,EAEtD,SAASA,EAAsBC,EAAO,CACpCA,EAAM,eAAc,EACpBN,EAAO,aAAa,WAAY,MAAM,EACtC,MAAMO,EAAW,YAAY,IAAM,CACjC,MAAMC,EAAYV,EAAiB,QAAS,EAAG,KAAK,IAAG,EAEjDW,EAAOjB,EAAUgB,CAAS,EAChCP,EAAa,CAAC,EAAE,YAAcQ,EAAK,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAClER,EAAa,CAAC,EAAE,YAAcQ,EAAK,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EACnER,EAAa,CAAC,EAAE,YAAcQ,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EACrER,EAAa,CAAC,EAAE,YAAcQ,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EACjED,EAAY,OACd,cAAcD,CAAQ,EACtBR,EAAM,aAAa,WAAY,OAAO,EAEzC,EAAE,GAAI,CACT"}